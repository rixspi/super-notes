// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.5.21'
    repositories {
        google()
        mavenCentral()
        maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.android.tools.build:gradle:7.1.0-alpha02'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.5'  // Google Services plugin
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.2'
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.37'
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.16.0"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
plugins {
    id "io.gitlab.arturbosch.detekt" version "1.16.0"
}

repositories {
    mavenCentral()
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs += [
                    "-XXLanguage:+InlineClasses",
                    "-Xopt-in=kotlin.RequiresOptIn"
            ]
        }
    }
}

def projectSource = file(projectDir)
def configFile = files("$rootDir/config/detekt/detekt.yml")
def baselineFile = file("$rootDir/config/detekt/baseline.xml")
def kotlinFiles = "**/*.kt"
def resourceFiles = "**/resources/**"
def buildFiles = "**/build/**"

apply plugin: 'io.gitlab.arturbosch.detekt'

tasks.register("detektAll", io.gitlab.arturbosch.detekt.Detekt) {
    def autoFix = project.hasProperty('detektAutoFix')

    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    autoCorrect = autoFix
    buildUponDefaultConfig = true
    setSource(projectSource)
    if (baselineFile.exists()) {
        baseline.set(baselineFile)
    }
    config.setFrom(configFile)
    include(kotlinFiles)
    exclude(resourceFiles, buildFiles)
    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = false
    }
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.16.0"
}
apply from: file('unit-tests-kotlin-modules.gradle')

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

subprojects {

    afterEvaluate { currProject ->

        if (!isAndroidModule(currProject)) {
            if (currProject.tasks.findByName("test")) {
                tasks.register("testDebugUnitTest") {
                    finalizedBy("test")
                }
            }
        }
    }
}
private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}
